<?php

namespace Simon\SecurionPay\Block\Form;

use Magento\Framework\Serialize\Serializer\Json as Serializer;
use Magento\Framework\UrlInterface;

class Cc extends \Magento\Payment\Block\Form\Cc
{
    /**
     * @var \Magento\Payment\Model\MethodInterface
     */
    protected $method;
    /**
     * @var \Simon\SecurionPay\Gateway\Config\Config
     */
    protected $config;
    /**
     * @var Serializer
     */
    protected $serializer;
    /**
     * @var UrlInterface
     */
    protected $urlBuilder;
    /**
     * @var \Magento\Framework\View\Asset\Repository
     */
    protected $assetRepository;

    /**
     * Cc constructor.
     * @param \Magento\Framework\View\Element\Template\Context $context
     * @param \Magento\Framework\View\Asset\Repository $assetRepository
     * @param \Magento\Payment\Model\Config $paymentConfig
     * @param \Magento\Payment\Model\MethodInterface $method
     * @param \Simon\SecurionPay\Gateway\Config\Config $config
     * @param Serializer $serializer
     * @param UrlInterface $urlBuilder
     * @param array $data
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Magento\Framework\View\Asset\Repository $assetRepository,
        \Magento\Payment\Model\Config $paymentConfig,
        \Magento\Payment\Model\MethodInterface $method,
        \Simon\SecurionPay\Gateway\Config\Config $config,
        Serializer $serializer,
        UrlInterface $urlBuilder,
        array $data = []
    ) {
        parent::__construct($context, $paymentConfig, $data);
        $this->method = $method;
        $this->config = $config;
        $this->serializer = $serializer;
        $this->urlBuilder = $urlBuilder;
        $this->assetRepository = $assetRepository;
    }

    /**
     * @return \Magento\Payment\Model\MethodInterface
     */
    public function getMethod()
    {
        return $this->method; // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getJsonConfig()
    {
        try {
            $storeId = $this->_storeManager->getStore()->getId();
            $config = [
                'isActive' => $this->config->isActive($storeId),
                'publicKey' => $this->config->getPublicKey($storeId),
                'savePaymentMethod' => "button[role='save-payment-method']",
                'savePaymentMethodLocation' => $this->urlBuilder->getUrl('vault/cards/save'),
                'redirectUrl' => $this->urlBuilder->getUrl('vault/cards/listaction'),
                'icon' => $this->assetRepository->createAsset('Simon_SecurionPay::images/loader.gif')->getUrl()
            ];
            return $this->serializer->serialize($config);
        } catch (\Exception $e) {
            return null;
        }
    }
}
